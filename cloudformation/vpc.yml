AWSTemplateFormatVersion: '2010-09-09'

Description: >
  VPC template
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups: 
      - 
        Label: 
          default: "Vpc CIDR"
        Parameters: 
          - VpcCIDR 
      - 
        Label: 
          default: "Subnet CIDR"
        Parameters: 
          - PublicSubnet1CIDR 
          - PublicSubnet2CIDR 
          - PrivateSubnet1CIDR 
          - PrivateSubnet2CIDR 
          - PrivateSubnet3CIDR 
          - PrivateSubnet4CIDR 
      - 
        Label: 
          default: "SSH CIDR"
        Parameters: 
          - SSHLocation 
      - 
        Label: 
          default: "Database port"
        Parameters: 
          - DatabasePort 

Parameters: 
  VpcCIDR: 
    Default: 10.0.0.0/16
    Description: IP range
    Type: String 

  PublicSubnet1CIDR: 
    Default: 10.0.0.0/24
    Description: IP range for Public Subnet 1
    Type: String

  PublicSubnet2CIDR: 
    Default: 10.0.1.0/24
    Description: IP range for Public Subnet 2
    Type: String

  PrivateSubnet1CIDR: 
    Default: 10.0.2.0/24
    Description: IP range for Private Subnet 1
    Type: String

  PrivateSubnet2CIDR: 
    Default: 10.0.3.0/24
    Description: IP range for Private Subnet 2
    Type: String

  PrivateSubnet3CIDR: 
    Default: 10.0.4.0/24
    Description: IP range for Private Subnet 3
    Type: String

  PrivateSubnet4CIDR: 
    Default: 10.0.5.0/24
    Description: IP range for Private Subnet 4
    Type: String

  SSHLocation:
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: x.x.x.x/x.
    Default: 0.0.0.0/0
    MaxLength: '18'
    MinLength: '9'
    Type: String

  DatabasePort:
    Default: 5432
    Description: Database Port
    Type: Number


Resources:
  VPC: 
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: TaskC-VPC

  InternetGateWay:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags: 
      - Key: Name
        Value: Internet GateWay

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateWay
      VpcId: !Ref VPC

  PublicSubnet1: 
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public Subnet 1

  PublicSubnet2: 
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public Subnet 2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public Route Table

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0 
      GatewayId: !Ref InternetGateWay
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateSubnet1: 
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private Subnet 1 For App

  PrivateSubnet2: 
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private Subnet 2 For App

  PrivateSubnet3: 
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref PrivateSubnet3CIDR
      MapPublicIpOnLaunch: false
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private Subnet 1 For Database 

  PrivateSubnet4: 
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Ref PrivateSubnet4CIDR
      MapPublicIpOnLaunch: false
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private Subnet 2 For Database 

  ALBSecurityGroup: 
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Enable HTTP/HTTPS access on port 80/443 
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC
      Tags: 
        - Key: Name
          Value: ALB Security Group

  SSHSecurityGroup: 
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: SSH Security Group 
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
      VpcId: !Ref VPC
      Tags: 
        - Key: Name
          Value: SSH Security Group 

  WebServerSecurityGroup: 
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Enable HTTP/HTTPS access via port 80/443
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref SSHSecurityGroup
      VpcId: !Ref VPC
      Tags: 
        - Key: Name
          Value: Web Server Security Group 
    
  DatabaseSecurityGroup: 
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Open Database 
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: !Ref DatabasePort
          ToPort: !Ref DatabasePort
          SourceSecurityGroupId: !Ref WebServerSecurityGroup
      VpcId: !Ref VPC
      Tags: 
        - Key: Name
          Value: Database Security Group
    

Outputs:
  VPC:
    Description: VPC Id
    Value: !Ref VPC
    Export:
      Name: !Sub ${AWS::StackName}-VPC

  PublicSubnet1:
    Description: Public Subnet 1 Id
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet1

  PublicSubnet2:
    Description: Public Subnet 2 Id
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet2

  PrivateSubnet1:
    Description: Private Subnet 1 Id
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet1

  PrivateSubnet2:
    Description: Private Subnet 2 Id
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet2

  PrivateSubnet3:
    Description: Private Subnet 3 Id
    Value: !Ref PrivateSubnet3
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet3

  PrivateSubnet4:
    Description: Private Subnet 4 Id
    Value: !Ref PrivateSubnet4
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet4

  ALBSecurityGroup:
    Description: Application Load Balancer Security Group Id
    Value: !Ref ALBSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-ALBSecurityGroup

  SSHSecurityGroup:
    Description: SSH Security Group Id
    Value: !Ref SSHSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-SSHSecurityGroup

  WebServerSecurityGroup:
    Description: WebServer Security Group Id
    Value: !Ref WebServerSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-WebServerSecurityGroup

  DatabaseSecurityGroup:
    Description: Database Security Group Id
    Value: !Ref DatabaseSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-DatabaseSecurityGroup